// @generated by tools/generate-ethos-proto.mjs. Do not edit manually.
import {
  Message as ProtoMessage,
  proto3,
  protoInt64,
  type EnumType,
  type MessageType,
  type PartialMessage,
  type PlainMessage,
} from "@bufbuild/protobuf";

export enum PresenceState {
  PRESENCE_STATE_UNSPECIFIED = 0,
  STATE_OFFLINE = 1,
  STATE_ONLINE = 2,
  STATE_AWAY = 3,
  STATE_BUSY = 4,
}
proto3.util.setEnumType(PresenceState, "ethos.v1.PresenceState", [
  { no: 0, name: "PRESENCE_STATE_UNSPECIFIED" },
  { no: 1, name: "STATE_OFFLINE" },
  { no: 2, name: "STATE_ONLINE" },
  { no: 3, name: "STATE_AWAY" },
  { no: 4, name: "STATE_BUSY" },
]);

export class Participant extends ProtoMessage<Participant> {
  userId = "";
  displayName = "";
  avatarUrl = "";

  constructor(data?: PartialMessage<Participant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ethos.v1.Participant";
  static readonly fields = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 },
    { no: 3, name: "avatar_url", kind: "scalar", T: 9 },
  ]);
}

export class Conversation extends ProtoMessage<Conversation> {
  id = "";
  topic = "";
  participants: Participant[] = [];
  updatedAt = protoInt64.zero;

  constructor(data?: PartialMessage<Conversation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ethos.v1.Conversation";
  static readonly fields = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 },
    { no: 2, name: "topic", kind: "scalar", T: 9 },
    {
      no: 3,
      name: "participants",
      kind: "message",
      T: Participant as unknown as MessageType<Participant>,
      repeated: true,
    },
    { no: 4, name: "updated_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);
}

export class Message extends ProtoMessage<Message> {
  id = "";
  conversationId = "";
  senderId = "";
  body = "";
  timestampMs = protoInt64.zero;

  constructor(data?: PartialMessage<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ethos.v1.Message";
  static readonly fields = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 },
    { no: 2, name: "conversation_id", kind: "scalar", T: 9 },
    { no: 3, name: "sender_id", kind: "scalar", T: 9 },
    { no: 4, name: "body", kind: "scalar", T: 9 },
    { no: 5, name: "timestamp_ms", kind: "scalar", T: 3 },
  ]);
}

export class PresenceEvent extends ProtoMessage<PresenceEvent> {
  userId = "";
  state = PresenceState.PRESENCE_STATE_UNSPECIFIED;
  updatedAt = protoInt64.zero;

  constructor(data?: PartialMessage<PresenceEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ethos.v1.PresenceEvent";
  static readonly fields = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 },
    { no: 2, name: "state", kind: "enum", T: PresenceState as unknown as EnumType },
    { no: 3, name: "updated_at", kind: "scalar", T: 3 },
  ]);
}

export class ListConversationsRequest extends ProtoMessage<ListConversationsRequest> {
  constructor(data?: PartialMessage<ListConversationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ethos.v1.ListConversationsRequest";
  static readonly fields = proto3.util.newFieldList(() => []);
}

export class ListConversationsResponse extends ProtoMessage<ListConversationsResponse> {
  conversations: Conversation[] = [];

  constructor(data?: PartialMessage<ListConversationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ethos.v1.ListConversationsResponse";
  static readonly fields = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "conversations",
      kind: "message",
      T: Conversation as unknown as MessageType<Conversation>,
      repeated: true,
    },
  ]);
}

export class StreamMessagesRequest extends ProtoMessage<StreamMessagesRequest> {
  conversationId = "";

  constructor(data?: PartialMessage<StreamMessagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ethos.v1.StreamMessagesRequest";
  static readonly fields = proto3.util.newFieldList(() => [
    { no: 1, name: "conversation_id", kind: "scalar", T: 9 },
  ]);
}

export class StreamMessagesResponse extends ProtoMessage<StreamMessagesResponse> {
  message?: Message;

  constructor(data?: PartialMessage<StreamMessagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ethos.v1.StreamMessagesResponse";
  static readonly fields = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "message", T: Message as unknown as MessageType<Message> },
  ]);
}

export class CreateConversationRequest extends ProtoMessage<CreateConversationRequest> {
  participantUserIds: string[] = [];
  topic = "";

  constructor(data?: PartialMessage<CreateConversationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ethos.v1.CreateConversationRequest";
  static readonly fields = proto3.util.newFieldList(() => [
    { no: 1, name: "participant_user_ids", kind: "scalar", T: 9, repeated: true },
    { no: 2, name: "topic", kind: "scalar", T: 9 },
  ]);
}

export class CreateConversationResponse extends ProtoMessage<CreateConversationResponse> {
  conversation?: Conversation;

  constructor(data?: PartialMessage<CreateConversationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ethos.v1.CreateConversationResponse";
  static readonly fields = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "conversation",
      kind: "message",
      T: Conversation as unknown as MessageType<Conversation>,
    },
  ]);
}

export class SendMessageRequest extends ProtoMessage<SendMessageRequest> {
  conversationId = "";
  body = "";

  constructor(data?: PartialMessage<SendMessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ethos.v1.SendMessageRequest";
  static readonly fields = proto3.util.newFieldList(() => [
    { no: 1, name: "conversation_id", kind: "scalar", T: 9 },
    { no: 2, name: "body", kind: "scalar", T: 9 },
  ]);
}

export class SendMessageResponse extends ProtoMessage<SendMessageResponse> {
  message?: Message;

  constructor(data?: PartialMessage<SendMessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ethos.v1.SendMessageResponse";
  static readonly fields = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "message", T: Message as unknown as MessageType<Message> },
  ]);
}

export class StreamPresenceRequest extends ProtoMessage<StreamPresenceRequest> {
  userIds: string[] = [];

  constructor(data?: PartialMessage<StreamPresenceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ethos.v1.StreamPresenceRequest";
  static readonly fields = proto3.util.newFieldList(() => [
    { no: 1, name: "user_ids", kind: "scalar", T: 9, repeated: true },
  ]);
}

export class StreamPresenceResponse extends ProtoMessage<StreamPresenceResponse> {
  event?: PresenceEvent;

  constructor(data?: PartialMessage<StreamPresenceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "ethos.v1.StreamPresenceResponse";
  static readonly fields = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "event",
      kind: "message",
      T: PresenceEvent as unknown as MessageType<PresenceEvent>,
    },
  ]);
}

export type { PlainMessage };
