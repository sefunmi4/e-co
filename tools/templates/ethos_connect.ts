// @generated by tools/generate-ethos-proto.mjs. Do not edit manually.
import { MethodKind, type MessageType, type ServiceType } from "@bufbuild/protobuf";
import {
  CreateConversationRequest,
  type CreateConversationRequest as CreateConversationRequestMessage,
  CreateConversationResponse,
  type CreateConversationResponse as CreateConversationResponseMessage,
  ListConversationsRequest,
  type ListConversationsRequest as ListConversationsRequestMessage,
  ListConversationsResponse,
  type ListConversationsResponse as ListConversationsResponseMessage,
  SendMessageRequest,
  type SendMessageRequest as SendMessageRequestMessage,
  SendMessageResponse,
  type SendMessageResponse as SendMessageResponseMessage,
  StreamMessagesRequest,
  type StreamMessagesRequest as StreamMessagesRequestMessage,
  StreamMessagesResponse,
  type StreamMessagesResponse as StreamMessagesResponseMessage,
  StreamPresenceRequest,
  type StreamPresenceRequest as StreamPresenceRequestMessage,
  StreamPresenceResponse,
  type StreamPresenceResponse as StreamPresenceResponseMessage,
} from "./ethos_pb";

export const ConversationsService = {
  typeName: "ethos.v1.ConversationsService",
  methods: {
    listConversations: {
      name: "ListConversations",
      I: ListConversationsRequest as unknown as MessageType<ListConversationsRequestMessage>,
      O: ListConversationsResponse as unknown as MessageType<ListConversationsResponseMessage>,
      kind: MethodKind.Unary,
    },
    createConversation: {
      name: "CreateConversation",
      I: CreateConversationRequest as unknown as MessageType<CreateConversationRequestMessage>,
      O: CreateConversationResponse as unknown as MessageType<CreateConversationResponseMessage>,
      kind: MethodKind.Unary,
    },
    sendMessage: {
      name: "SendMessage",
      I: SendMessageRequest as unknown as MessageType<SendMessageRequestMessage>,
      O: SendMessageResponse as unknown as MessageType<SendMessageResponseMessage>,
      kind: MethodKind.Unary,
    },
    streamMessages: {
      name: "StreamMessages",
      I: StreamMessagesRequest as unknown as MessageType<StreamMessagesRequestMessage>,
      O: StreamMessagesResponse as unknown as MessageType<StreamMessagesResponseMessage>,
      kind: MethodKind.ServerStreaming,
    },
    streamPresence: {
      name: "StreamPresence",
      I: StreamPresenceRequest as unknown as MessageType<StreamPresenceRequestMessage>,
      O: StreamPresenceResponse as unknown as MessageType<StreamPresenceResponseMessage>,
      kind: MethodKind.ServerStreaming,
    },
  },
} as const satisfies ServiceType;

export const ConversationsServiceDefinition =
  ConversationsService as unknown as ServiceType & typeof ConversationsService;
